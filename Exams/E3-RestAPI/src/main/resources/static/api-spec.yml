openapi: 3.1.0

info:
  title: OpenAPI Music
  description: The Music API offers easy access to artist, album, and song data, perfect for building music-related applications.
  version: 1.0.0

servers:
  - url: http://localhost:8080
    description: Embedded Tomcat Server

tags:
  - name: Albums
    description: Operations related to albums
  - name: Artists
    description: Operations related to artists
  - name: Songs
    description: Operations related to songs

paths:
  /albums/{id}:
    get:
      tags:
        - Albums
      operationId: getAlbumById
      summary: Read an album by ID
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the album to retrieve
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '404':
          description: NOT FOUND
        '400':
          description: BAD REQUEST
    put:
      tags:
        - Albums
      operationId: putAlbumById
      summary: Update an album by ID
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the album to retrieve
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Album'
        required: true
      responses:
        '204':
          description: NO CONTENT
        '404':
          description: NOT FOUND
        '400':
          description: BAD REQUEST
    delete:
      tags:
        - Albums
      operationId: deleteAlbumById
      summary: Delete an album by ID
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the album to retrieve
          schema:
            type: integer
            format: int32
      responses:
        '404':
          description: NOT FOUND
        '400':
          description: BAD REQUEST

  /albums:
    post:
      tags:
        - Albums
      operationId: postAlbum
      summary: Create a new album
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Album'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: BAD REQUEST
    get:
      tags:
        - Albums
      operationId: getAlbums
      summary: Get all albums
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'

  /artists/{id}:
    get:
      tags:
        - Artists
      operationId: getArtistById
      summary: Read an artist by ID
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the artist to retrieve
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '404':
          description: NOT FOUND
        '400':
          description: BAD REQUEST
    put:
      tags:
        - Artists
      operationId: putArtistById
      summary: Update an artist by ID
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the artist to retrieve
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Artist'
        required: true
      responses:
        '204':
          description: NO CONTENT
        '404':
          description: NOT FOUND
        '400':
          description: BAD REQUEST
    delete:
      tags:
        - Artists
      operationId: deleteArtistById
      summary: Delete an artist by ID
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the artist to retrieve
          schema:
            type: integer
            format: int32
      responses:
        '404':
          description: NOT FOUND
        '400':
          description: BAD REQUEST

  /artists:
    post:
      tags:
        - Artists
      operationId: postArtist
      summary: Create a new artist
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Artist'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: BAD REQUEST
    get:
      tags:
        - Artists
      operationId: getArtists
      summary: Get all artists
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'

  /songs/{id}:
    get:
      tags:
        - Songs
      operationId: getSongById
      summary: Read a song by ID
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the song to retrieve
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'
        '404':
          description: NOT FOUND
        '400':
          description: BAD REQUEST
    put:
      tags:
        - Songs
      operationId: putSongById
      summary: Update a song by ID
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the song to retrieve
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Song'
        required: true
      responses:
        '204':
          description: NO CONTENT
        '404':
          description: NOT FOUND
        '400':
          description: BAD REQUEST
    delete:
      tags:
        - Songs
      operationId: deleteSongById
      summary: Delete a song by ID
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the song to retrieve
          schema:
            type: integer
            format: int32
      responses:
        '404':
          description: NOT FOUND
        '400':
          description: BAD REQUEST

  /songs:
    post:
      tags:
        - Songs
      operationId: postSong
      summary: Create a new song
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Song'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'
        '400':
          description: BAD REQUEST
    get:
      tags:
        - Songs
      operationId: getSongs
      summary: Get all songs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Song'

components:
  schemas:
    Album:
      required:
        - artists
        - songs
      type: object
      properties:
        title:
          type: string
        genre:
          type: string
          enum:
            - POP
            - ROCK
            - HIPHOP
            - RAP
            - REGGAETON
            - ELECTRONIC
            - RNB
        release_date:
          type: string
          format: date
        sales:
          type: number
          format: float
        has_vinyl:
          type: boolean
        songs:
          type: array
          items:
            $ref: '#/components/schemas/Song'
        artists:
          type: array
          items:
            $ref: '#/components/schemas/Artist'
        id:
          type: integer
          format: int32

    Artist:
      type: object
      properties:
        name:
          type: string
        birth_date:
          type: string
          format: date
        city:
          type: string
        monthly_listeners:
          type: integer
          format: int32
        label:
          type: string
        id:
          type: integer
          format: int32

    Song:
      type: object
      properties:
        name:
          type: string
        time:
          type: string
          pattern: '^\d{2}:\d{2}:\d{2}$'
        id:
          type: integer
          format: int32